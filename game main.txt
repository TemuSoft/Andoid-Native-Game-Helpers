package com.b8ikin9.h19h8ay;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.os.Build;
import android.os.VibrationEffect;
import android.os.Vibrator;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceView;

import java.util.Random;

public class GameView extends SurfaceView implements Runnable {

    private Thread thread;
    private int screenX, screenY = 0;
    private Paint paint;
    private GameActivity activity;
    private Background bg;
    private SharedPreferences sharedPreferences;
    private SharedPreferences.Editor editor;
    private boolean isPlaying = false;
    private boolean isMute, onVibrating, soundMute;
    private Random random;
    private int score = 0;
    private String lang;
    private int xSpeed, ySpeed;
    private boolean on_tap_started = true;
    private Vibrator v;


    public GameView(GameActivity activity, int screenX, int screenY) {
        super(activity);

        this.activity = activity;

        this.screenX = screenX;
        this.screenY = screenY;

        v = (Vibrator) activity.getSystemService(Context.VIBRATOR_SERVICE);

        random = new Random();

        sharedPreferences = activity.getSharedPreferences("bike81nhighywa9", Context.MODE_PRIVATE);
        editor = sharedPreferences.edit();
        isMute = sharedPreferences.getBoolean("isMute", false);
        onVibrating = sharedPreferences.getBoolean("onVibrating", true);
        soundMute = sharedPreferences.getBoolean("soundMute", false);
        lang = sharedPreferences.getString("lang", "");

        bg = new Background(activity,screenX, screenY, getResources());

        paint = new Paint();
        setSpeed();
    }

    @Override
    public void run() {
         while (isPlaying) {
             draw ();
             sleep ();
             update();
         }
    }

    private void vibrate() {
        if (onVibrating){
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                v.vibrate(VibrationEffect.createOneShot(100, VibrationEffect.DEFAULT_AMPLITUDE));
            } else {
                //deprecated in API 26
                v.vibrate(100);
            }
        }
    }

    private void setSpeed() {
        xSpeed = screenX / 100;
        ySpeed = screenY / 70;
    }

    private void update(){
        if (on_tap_started) {
            
        }
    }

    private void draw () {
        if (getHolder().getSurface().isValid()) {
            Canvas canvas = getHolder().lockCanvas();
            paint = new Paint();
            canvas.drawBitmap(bg.background, bg.x, bg.y, paint);

            canvas.drawBitmap(bg.pause, bg.pX, bg.pY, paint);
            canvas.drawBitmap(bg.score, bg.scoX, bg.scoY, paint);

            paint.setTextSize(screenY / 12);
            paint.setColor(getResources().getColor(R.color.white));
            paint.setTextAlign(Paint.Align.CENTER);
            paint.setStyle(Paint.Style.STROKE);
            paint.setPathEffect(null);
            paint.setStrokeWidth(7);
            canvas.drawText(score + " ", bg.scoX + bg.scoWidth / 2,  bg.scoY + bg.scoHeight * 3 / 4, paint);

            getHolder().unlockCanvasAndPost(canvas);
        }
    }

    private void sleep () {
         try {
             Thread.sleep(20);
         } catch (InterruptedException e) {
             e.printStackTrace();
         }
     }

    public void resume () {
        isPlaying = true;
        thread = new Thread(this);
        thread.start();
    }

    public void pause () {
        try {
            isPlaying = false;
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        int x = (int) event.getX();
        int y = (int) event.getY();

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                processActionDown(x, y);
                break;
            case MotionEvent.ACTION_MOVE:
                processActionMove(x, y);
                break;
            case MotionEvent.ACTION_UP:
                processActionUp(x, y);
                break;
        }
        return true;
    }

    private void processActionDown(int x, int y){
        on_tap_started = true;
        Rect clicked = new Rect(x, y, x ,y);
        
    }

    private void processActionMove(int x, int y){
        Rect clicked = new Rect(x, y, x ,y);
        
    }

    private void processActionUp(int x, int y) {
        Rect clicked = new Rect(x, y, x ,y);

        if (Rect.intersects(clicked, bg.getPauseCollision())){
            Intent intent = new Intent(activity, PauseActivity.class);
            activity.startActivity(intent);
        }else {
            processGameOnTap(x, y);
        }
    }

    private void processGameOnTap(int x, int y) {
        Player.button(soundMute);
        vibrate();

        
    }

    private void game_over(){
        editor.putInt("score", score);
        editor.apply();

        Intent intent = new Intent(activity, GameOverActivity.class);
        activity.startActivity(intent);
        activity.finish();
    }

}
